{"version":3,"sources":["specs/unit.js"],"names":["utils","ds","require","testable","suppressWarnings","describe","fun","go","el","getEl","property","it","tryIt","STATE","inst","cssState","expect","toBe","cssNoState","getCssState","getCssNoState","uid","toBeDefined","getUID","uid1","uid2","not","toContain"],"mappings":";;;;AAAA;;IAAYA,K;;;;AACZ,IAAIC,KAAKC,QAAQ,aAAR,CAAT;;AAEA;AACAD,GAAGE,QAAH,CAAYC,gBAAZ,CAA6B,IAA7B;;AAEAC,SAAS,IAAT,EAAe,YAAM;AACjB,QAAIC,MAAML,GAAGM,EAAb;AAAA,QACIC,KAAKR,MAAMS,KAAN,EADT;AAAA,QAEIC,WAAW,SAFf;;AAIAC,OAAG,8CAAH,EAAmD,YAAM;AACrDX,cAAMY,KAAN,CAAY,YAAM;AACdN,gBAAI,EAAEE,MAAF,EAAME,kBAAN,EAAJ;AACH,SAFD;AAGH,KAJD;;AAMAC,OAAG,iDAAH,EAAsD,YAAM;AACxD,YAAME,QAAQ,kBAAd;AACA,YAAIC,OAAOR,IAAI;AACXE,kBADW,EACPE,kBADO;AAEXK,sBAAUF;AAFC,SAAJ,CAAX;;AAKAG,eAAOF,KAAKC,QAAZ,EAAsBE,IAAtB,CAA2BJ,KAA3B;AACH,KARD;;AAUAF,OAAG,mDAAH,EAAwD,YAAM;AAC1D,YAAME,QAAQ,eAAd;AACA,YAAIC,OAAOR,IAAI;AACXE,kBADW;AAEXE,8BAFW;AAGXQ,wBAAYL;AAHD,SAAJ,CAAX;;AAMAG,eAAOF,KAAKI,UAAZ,EAAwBD,IAAxB,CAA6BJ,KAA7B;AACH,KATD;;AAWAF,OAAG,4EAAH,EAAiF,YAAM;AACnF,YAAIG,OAAOR,IAAI,EAAEE,MAAF,EAAME,kBAAN,EAAJ,CAAX;AACAM,eAAOF,KAAKC,QAAZ,EAAsBE,IAAtB,CAA2BhB,GAAGE,QAAH,CAAYgB,WAAZ,EAA3B;AACH,KAHD;;AAKAR,OAAG,8EAAH,EAAmF,YAAM;AACrF,YAAIG,OAAOR,IAAI,EAAEE,MAAF,EAAME,kBAAN,EAAJ,CAAX;AACAM,eAAOF,KAAKI,UAAZ,EAAwBD,IAAxB,CAA6BhB,GAAGE,QAAH,CAAYiB,aAAZ,EAA7B;AACH,KAHD;;AAMAT,OAAG,+EAAH,EAAoF,YAAM;AACtF,YAAIG,OAAOR,IAAI,EAAEE,MAAF,EAAME,kBAAN,EAAJ,CAAX;AACAM,eAAOF,KAAKO,GAAZ,EAAiBC,WAAjB;AACH,KAHD;AAIH,CA/CD;;AAkDAjB,SAAS,QAAT,EAAmB,YAAW;;AAE7B,QAAIC,MAAML,GAAGE,QAAH,CAAYoB,MAAtB;AAAA,QACIC,OAAOlB,KADX;AAAA,QAEImB,OAAOnB,KAFX;;AAIAK,OAAG,qBAAH,EAA0B,YAAM;AAC/BK,sBAAcQ,IAAd,yCAAcA,IAAd,GAAoBP,IAApB,CAAyB,QAAzB;AACA,KAFD;;AAIAN,OAAG,2BAAH,EAAgC,YAAM;AACrCK,eAAOQ,IAAP,EAAaE,GAAb,CAAiBC,SAAjB,CAA2B,GAA3B;AACA,KAFD;;AAIAhB,OAAG,qCAAH,EAA0C,YAAM;AAC/CK,eAAOQ,IAAP,EAAaE,GAAb,CAAiBT,IAAjB,CAAsBQ,IAAtB;AACA,KAFD;AAGA,CAjBD","file":"specs/unit.js","sourcesContent":["import * as utils from \"./utils.js\";\r\nvar ds = require(\"../index.js\");\r\n\r\n// stops console from clogging up with warnings during tests\r\nds.testable.suppressWarnings(true);\r\n\r\ndescribe(\"go\", () => {\r\n    var fun = ds.go\r\n      , el = utils.getEl()\r\n      , property = \"opacity\"\r\n\r\n    it(\"should verify 'el' and 'property' in options\", () => {\r\n        utils.tryIt(() => {\r\n            fun({ el, property });\r\n        });\r\n    });\r\n\r\n    it(\"should verify 'cssState' is returned unmodified\", () => {\r\n        const STATE = \"is-transitioning\";\r\n        var inst = fun({\r\n            el, property,\r\n            cssState: STATE\r\n        });\r\n\r\n        expect(inst.cssState).toBe(STATE);\r\n    });\r\n\r\n    it(\"should verify 'cssNoState' is returned unmodified\", () => {\r\n        const STATE = \"no-transition\";\r\n        var inst = fun({\r\n            el, \r\n            property, \r\n            cssNoState: STATE\r\n        });\r\n\r\n        expect(inst.cssNoState).toBe(STATE);\r\n    });\r\n\r\n    it(\"should verify 'cssState' is returned populated with default when not given\", () => {\r\n        var inst = fun({ el, property });\r\n        expect(inst.cssState).toBe(ds.testable.getCssState());\r\n    });\r\n\r\n    it(\"should verify 'cssNoState' is returned populated with default when not given\", () => {\r\n        var inst = fun({ el, property });\r\n        expect(inst.cssNoState).toBe(ds.testable.getCssNoState());\r\n    });\r\n\r\n    \r\n    it(\"should verify that an instance has been created and given a 'uid' (unique ID)\", () => {\r\n        var inst = fun({ el, property });\r\n        expect(inst.uid).toBeDefined();\r\n    });\r\n});\r\n\r\n\r\ndescribe(\"getUID\", function() {\r\n\t\r\n\tvar fun = ds.testable.getUID\r\n\t  , uid1 = fun()\r\n\t  , uid2 = fun();\r\n\r\n\tit(\"should get a string\", () => {\r\n\t\texpect(typeof uid1).toBe(\"string\");\r\n\t});\r\n\r\n\tit(\"should not contain spaces\", () => {\r\n\t\texpect(uid1).not.toContain(\" \");\r\n\t});\r\n\r\n\tit(\"should get a unique value each time\", () => {\r\n\t\texpect(uid1).not.toBe(uid2);\r\n\t});\r\n});\r\n"],"sourceRoot":"/source/"}